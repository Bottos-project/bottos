// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/bottos-project/bottos/api/chain.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Chain service

type ChainClient interface {
	SendTransaction(ctx context.Context, in *Transaction, opts ...client.CallOption) (*SendTransactionResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...client.CallOption) (*GetTransactionResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...client.CallOption) (*GetBlockResponse, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*GetInfoResponse, error)
	GetAccountBrief(ctx context.Context, in *GetAccountBriefRequest, opts ...client.CallOption) (*GetAccountBriefResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*GetAccountResponse, error)
	QueryDBValue(ctx context.Context, in *QueryDBValueRequest, opts ...client.CallOption) (*QueryDBValueResponse, error)
	GetAbi(ctx context.Context, in *GetAbiRequest, opts ...client.CallOption) (*GetAbiResponse, error)
	GetTransferCredit(ctx context.Context, in *GetTransferCreditRequest, opts ...client.CallOption) (*GetTransferCreditResponse, error)
	//    delegate
	GetAllDelegates(ctx context.Context, in *GetAllDelegatesRequest, opts ...client.CallOption) (*GetAllDelegatesResponse, error)
	GetDelegate(ctx context.Context, in *GetDelegateRequest, opts ...client.CallOption) (*GetDelegateResponse, error)
	//    resource
	GetForecastResBalance(ctx context.Context, in *GetForecastResBalanceRequest, opts ...client.CallOption) (*GetForecastResBalanceResponse, error)
	//    p2p
	ConnectPeerByAddress(ctx context.Context, in *ConnectPeerByAddressRequest, opts ...client.CallOption) (*ConnectPeerByAddressResponse, error)
	DisconnectPeerByAddress(ctx context.Context, in *DisconnectPeerByAddressRequest, opts ...client.CallOption) (*DisconnectPeerByAddressResponse, error)
	GetPeerStateByAddress(ctx context.Context, in *GetPeerStateByAddressRequest, opts ...client.CallOption) (*GetPeerStateByAddressResponse, error)
	GetPeers(ctx context.Context, in *GetPeersRequest, opts ...client.CallOption) (*GetPeersResponse, error)
	GetHashForSign(ctx context.Context, in *GetHashForSignRequest, opts ...client.CallOption) (*GetHashForSignResponse, error)
	//    wallet
	GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...client.CallOption) (*GenerateKeyPairResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...client.CallOption) (*CreateAccountResponse, error)
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...client.CallOption) (*CreateWalletResponse, error)
	CreateWalletManual(ctx context.Context, in *CreateWalletManualRequest, opts ...client.CallOption) (*CreateWalletManualResponse, error)
	UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...client.CallOption) (*UnlockAccountResponse, error)
	LockAccount(ctx context.Context, in *LockAccountRequest, opts ...client.CallOption) (*LockAccountResponse, error)
	ListWallet(ctx context.Context, in *ListWalletRequest, opts ...client.CallOption) (*ListWalletResponse, error)
	GetKeyPair(ctx context.Context, in *GetKeyPairRequest, opts ...client.CallOption) (*GetKeyPairResponse, error)
	GetPubKey(ctx context.Context, in *GetPubKeyRequest, opts ...client.CallOption) (*GetPubKeyResponse, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...client.CallOption) (*SignTransactionResponse, error)
	SignData(ctx context.Context, in *SignDataRequest, opts ...client.CallOption) (*SignDataResponse, error)
	SignHash(ctx context.Context, in *SignHashRequest, opts ...client.CallOption) (*SignHashResponse, error)
	ReviewProposal(ctx context.Context, in *ReviewProposalRequest, opts ...client.CallOption) (*ReviewProposalResponse, error)
}

type chainClient struct {
	c           client.Client
	serviceName string
}

func NewChainClient(serviceName string, c client.Client) ChainClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "api"
	}
	return &chainClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *chainClient) SendTransaction(ctx context.Context, in *Transaction, opts ...client.CallOption) (*SendTransactionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chain.SendTransaction", in)
	out := new(SendTransactionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...client.CallOption) (*GetTransactionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chain.GetTransaction", in)
	out := new(GetTransactionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...client.CallOption) (*GetBlockResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chain.GetBlock", in)
	out := new(GetBlockResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*GetInfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chain.GetInfo", in)
	out := new(GetInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) GetAccountBrief(ctx context.Context, in *GetAccountBriefRequest, opts ...client.CallOption) (*GetAccountBriefResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chain.GetAccountBrief", in)
	out := new(GetAccountBriefResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*GetAccountResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chain.GetAccount", in)
	out := new(GetAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) QueryDBValue(ctx context.Context, in *QueryDBValueRequest, opts ...client.CallOption) (*QueryDBValueResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chain.QueryDBValue", in)
	out := new(QueryDBValueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) GetAbi(ctx context.Context, in *GetAbiRequest, opts ...client.CallOption) (*GetAbiResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chain.GetAbi", in)
	out := new(GetAbiResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) GetTransferCredit(ctx context.Context, in *GetTransferCreditRequest, opts ...client.CallOption) (*GetTransferCreditResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chain.GetTransferCredit", in)
	out := new(GetTransferCreditResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) GetAllDelegates(ctx context.Context, in *GetAllDelegatesRequest, opts ...client.CallOption) (*GetAllDelegatesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chain.GetAllDelegates", in)
	out := new(GetAllDelegatesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) GetDelegate(ctx context.Context, in *GetDelegateRequest, opts ...client.CallOption) (*GetDelegateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Chain.GetDelegate", in)
	out := new(GetDelegateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chain service

type ChainHandler interface {
	SendTransaction(context.Context, *Transaction, *SendTransactionResponse) error
	GetTransaction(context.Context, *GetTransactionRequest, *GetTransactionResponse) error
	GetBlock(context.Context, *GetBlockRequest, *GetBlockResponse) error
	GetInfo(context.Context, *GetInfoRequest, *GetInfoResponse) error
	GetAccount(context.Context, *GetAccountRequest, *GetAccountResponse) error
	GetKeyValue(context.Context, *GetKeyValueRequest, *GetKeyValueResponse) error
	GetAbi(context.Context, *GetAbiRequest, *GetAbiResponse) error
	GetTransferCredit(context.Context, *GetTransferCreditRequest, *GetTransferCreditResponse) error
}

func RegisterChainHandler(s server.Server, hdlr ChainHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Chain{hdlr}, opts...))
}

type Chain struct {
	ChainHandler
}

func (h *Chain) SendTransaction(ctx context.Context, in *Transaction, out *SendTransactionResponse) error {
	return h.ChainHandler.SendTransaction(ctx, in, out)
}

func (h *Chain) GetTransaction(ctx context.Context, in *GetTransactionRequest, out *GetTransactionResponse) error {
	return h.ChainHandler.GetTransaction(ctx, in, out)
}

func (h *Chain) GetBlock(ctx context.Context, in *GetBlockRequest, out *GetBlockResponse) error {
	return h.ChainHandler.GetBlock(ctx, in, out)
}

func (h *Chain) GetInfo(ctx context.Context, in *GetInfoRequest, out *GetInfoResponse) error {
	return h.ChainHandler.GetInfo(ctx, in, out)
}

func (h *Chain) GetAccount(ctx context.Context, in *GetAccountRequest, out *GetAccountResponse) error {
	return h.ChainHandler.GetAccount(ctx, in, out)
}

func (h *Chain) GetKeyValue(ctx context.Context, in *GetKeyValueRequest, out *GetKeyValueResponse) error {
	return h.ChainHandler.GetKeyValue(ctx, in, out)
}

func (h *Chain) GetAbi(ctx context.Context, in *GetAbiRequest, out *GetAbiResponse) error {
	return h.ChainHandler.GetAbi(ctx, in, out)
}

func (h *Chain) GetTransferCredit(ctx context.Context, in *GetTransferCreditRequest, out *GetTransferCreditResponse) error {
	return h.ChainHandler.GetTransferCredit(ctx, in, out)
}
